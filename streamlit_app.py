# -*- coding: utf-8 -*-
import streamlit as st
import folium
import pandas as pd
import numpy as np
import plotly.express as px
import ee
import geemap.foliumap as geemap
import json
import os
from google.oauth2 import service_account

# —————————— 페이지 설정 ——————————
st.set_page_config(page_title="물러서는 땅, 다가오는 바다 — 해수면 상승 대시보드", layout="wide", page_icon="🌊")

# —————————— GEE 인증 ——————————
@st.cache_resource
def initialize_ee():
    try:
        creds_dict = None
        if hasattr(st, 'secrets') and st.secrets.get("gcp_service_account"):
            creds_dict = st.secrets["gcp_service_account"]
        else:
            secret_value = os.environ.get('GEE_JSON_KEY')
            if secret_value:
                creds_dict = json.loads(secret_value)
        if not creds_dict:
            st.error("GEE 인증 정보를 찾을 수 없습니다. GitHub 또는 Streamlit Secret 설정을 확인하세요.")
            st.stop()
        credentials = service_account.Credentials.from_service_account_info(creds_dict)
        scoped_credentials = credentials.with_scopes([
            'https://www.googleapis.com/auth/earthengine',
            'https://www.googleapis.com/auth/cloud-platform'
        ])
        ee.Initialize(credentials=scoped_credentials)
        st.sidebar.success("✅ GEE 인증 성공!")
        return True
    except Exception as e:
        st.error(f"🚨 GEE 인증 오류가 발생했습니다. Secret 키가 유효한지, GEE API가 활성화되어 있는지 확인해주세요.\n\n오류 상세: {e}")
        st.stop()

# ————————————
# Helper / 데이터 생성
# ————————————
# 200개 이상의 주요 국가 및 지역 좌표 데이터
COUNTRY_COORDS = {
    '가나': [7.9465, -1.0232], '가봉': [-0.8037, 11.6094], '가이아나': [4.8604, -58.9302],
    '감비아': [13.4432, -15.3101], '과테말라': [15.7835, -90.2308], '그레나다': [12.1165, -61.6790],
    '그리스': [39.0742, 21.8243], '기니': [9.9456, -9.6966], '기니비사우': [11.8037, -15.1804],
    '나미비아': [-22.9576, 18.4904], '나우루': [-0.5228, 166.9315], '나이지리아': [9.0820, 8.6753],
    '남아프리카 공화국': [-30.5595, 22.9375], '남수단': [6.8770, 31.3070], '네덜란드': [52.1326, 5.2913],
    '네팔': [28.3949, 84.1240], '노르웨이': [60.4720, 8.4689], '뉴질랜드': [-40.9006, 174.8860],
    '니제르': [17.6078, 8.0817], '니카라과': [12.8654, -85.2072], '대한민국': [35.9078, 127.7669],
    '덴마크': [56.2639, 9.5018], '도미니카 공화국': [18.7357, -70.1627], '도미니카 연방': [15.4150, -61.3710],
    '독일': [51.1657, 10.4515], '동티모르': [-8.8742, 125.7275], '라오스': [19.8563, 102.4955],
    '라이베리아': [6.4281, -9.4295], '라트비아': [56.8796, 24.6032], '러시아': [61.5240, 105.3188],
    '레바논': [33.8547, 35.8623], '레소토': [-29.6100, 28.2336], '루마니아': [45.9432, 24.9668],
    '룩셈부르크': [49.8153, 6.1296], '르완다': [-1.9403, 29.8739], '리비아': [26.3351, 17.2283],
    '리투아니아': [55.1694, 23.8813], '리히텐슈타인': [47.1660, 9.5554], '마다가스카르': [-18.7669, 46.8691],
    '마셜 제도': [7.1315, 171.1845], '말라위': [-13.2543, 34.3015], '말레이시아': [4.2105, 101.9758],
    '말리': [17.5707, -3.9962], '멕시코': [23.6345, -102.5528], '모나코': [43.7333, 7.4167],
    '모로코': [31.7917, -7.0926], '모리셔스': [-20.3484, 57.5522], '모리타니': [21.0079, -10.9408],
    '모잠비크': [-18.6657, 35.5296], '몬테네그로': [42.7087, 19.3744], '몰도바': [47.4116, 28.3699],
    '몰디브': [3.2028, 73.2207], '몰타': [35.9375, 14.3754], '몽골': [46.8625, 103.8467],
    '미국': [37.0902, -95.7129], '미얀마': [21.9162, 95.9560], '미크로네시아 연방': [7.4256, 150.5508],
    '바누아투': [-15.3767, 166.9592], '바레인': [25.9304, 50.6378], '바베이도스': [13.1939, -59.5432],
    '바하마': [25.0343, -77.3963], '방글라데시': [23.6850, 90.3563], '베냉': [9.3077, 2.3158],
    '베네수엘라': [6.4238, -66.5897], '베트남': [14.0583, 108.2772], '벨기에': [50.5039, 4.4699],
    '벨라루스': [53.7098, 27.9534], '벨리즈': [17.1899, -88.4976], '보스니아 헤르체고비나': [43.9159, 17.6791],
    '보츠와나': [-22.3285, 24.6849], '볼리비아': [-16.2902, -63.5887], '부룬디': [-3.3731, 29.9189],
    '부르키나파소': [12.2383, -1.5616], '부탄': [27.5142, 90.4336], '북마케도니아': [41.6086, 21.7453],
    '불가리아': [42.7339, 25.4858], '브라질': [-14.2350, -51.9253], '브루나이': [4.5353, 114.7277],
    '사모아': [-13.7590, -172.1046], '사우디아라비아': [23.8859, 45.0792], '산마리노': [43.9424, 12.4578],
    '상투메 프린시페': [0.1864, 6.6131], '세네갈': [14.4974, -14.4524], '세르비아': [44.0165, 21.0059],
    '세이셸': [-4.6796, 55.4920], '세인트루시아': [13.9094, -60.9789], '세인트빈센트 그레나딘': [12.9843, -61.2872],
    '세인트키츠 네비스': [17.3578, -62.7830], '소말리아': [5.1521, 46.1996], '솔로몬 제도': [-9.6455, 160.1562],
    '수단': [12.8628, 30.2176], '수리남': [3.9193, -56.0278], '스리랑카': [7.8731, 80.7718],
    '스웨덴': [60.1282, 18.6435], '스위스': [46.8182, 8.2275], '스페인': [40.4637, -3.7492],
    '슬로바키아': [48.6690, 19.6990], '슬로베니아': [46.1512, 14.9955], '시리아': [34.8021, 38.9968],
    '시에라리온': [8.4606, -11.7799], '싱가포르': [1.3521, 103.8198], '아랍에미리트': [23.4241, 53.8478],
    '아르헨티나': [-38.4161, -63.6167], '아이슬란드': [64.9631, -19.0208], '아이티': [18.9712, -72.2852],
    '아일랜드': [53.4129, -8.2439], '아제르바이잔': [40.1431, 47.5769], '아프가니스탄': [33.9391, 67.7100],
    '안도라': [42.5063, 1.5218], '알바니아': [41.1533, 20.1683], '알제리': [28.0339, 1.6596],
    '앙골라': [-11.2027, 17.8739], '앤티가 바부다': [17.0608, -61.7964], '에리트레아': [15.1794, 39.7823],
    '에스와티니': [-26.5225, 31.4659], '에스토니아': [58.5953, 25.0136], '에콰도르': [-1.8312, -78.1834],
    '에티오피아': [9.1450, 40.4897], '엘살바도르': [13.7942, -88.8965], '영국': [55.3781, -3.4360],
    '예멘': [15.5527, 48.5164], '오만': [21.5126, 55.9233], '오스트레일리아': [-25.2744, 133.7751],
    '오스트리아': [47.5162, 14.5501], '온두라스': [15.2000, -86.2419], '요르단': [30.5852, 36.2384],
    '우간다': [1.3733, 32.2903], '우루과이': [-32.5228, -55.7658], '우즈베키스탄': [41.3775, 64.5853],
    '우크라이나': [48.3794, 31.1656], '이라크': [33.2232, 43.6793], '이란': [32.4279, 53.6880],
    '이스라엘': [31.0461, 34.8516], '이집트': [26.8206, 30.8025], '이탈리아': [41.8719, 12.5674],
    '인도': [20.5937, 78.9629], '인도네시아': [-0.7893, 113.9213], '일본': [36.2048, 138.2529],
    '자메이카': [18.1096, -77.2975], '잠비아': [-13.1339, 27.8493], '적도 기니': [1.6508, 10.2679],
    '조지아': [42.3154, 43.3569], '중앙아프리카 공화국': [6.6111, 20.9394], '중국': [35.8617, 104.1954],
    '지부티': [11.8251, 42.5903], '짐바브웨': [-19.0154, 29.1549], '체코': [49.8175, 15.4730],
    '칠레': [-35.6751, -71.5430], '카메룬': [7.3697, 12.3547], '카보베르데': [16.0021, -24.0132],
    '카자흐스탄': [48.0196, 66.9237], '카타르': [25.3548, 51.1839], '캄보디아': [12.5657, 104.9910],
    '캐나다': [56.1304, -106.3468], '케냐': [-0.0236, 37.9062], '코모로': [-11.6455, 43.3333],
    '코스타리카': [9.7489, -83.7534], '코트디부아르': [7.5400, -5.5471], '콜롬비아': [4.5709, -74.2973],
    '콩고 공화국': [-0.2280, 15.8277], '콩고 민주 공화국': [-4.0383, 21.7587], '쿠바': [21.5218, -77.7812],
    '쿠웨이트': [29.3117, 47.4818], '크로아티아': [45.1000, 15.2000], '키르기스스탄': [41.2044, 74.7661],
    '키리바시': [-3.3704, -168.7340], '키프로스': [35.1264, 33.4299], '타지키스탄': [38.8610, 71.2761],
    '탄자니아': [-6.3690, 34.8888], '태국': [15.8700, 100.9925], '토고': [8.6195, 0.8248],
    '통가': [-21.1790, -175.1982], '투르크메니스탄': [38.9697, 59.5563], '투발루': [-7.1095, 177.6493],
    '튀니지': [33.8869, 9.5375], '튀르키예': [38.9637, 35.2433], '파나마': [8.5380, -80.7821],
    '파라과이': [-23.4425, -58.4438], '파키스탄': [30.3753, 69.3451], '파푸아뉴기니': [-6.3150, 143.9555],
    '팔라우': [7.5150, 134.5825], '페루': [-9.1900, -75.0152], '포르투갈': [39.3999, -8.2245],
    '폴란드': [51.9194, 19.1451], '프랑스': [46.2276, 2.2137], '피지': [-17.7134, 178.0650],
    '핀란드': [61.9241, 25.7482], '필리핀': [12.8797, 121.7740], '헝가리': [47.1625, 19.5033]
}

@st.cache_data
def generate_pie_chart_data():
    """원 그래프를 위한 예측 통계 데이터를 생성합니다."""
    # 데이터는 여러 기후 연구 기관의 보고서를 기반으로 한 교육용 예측 모델입니다.
    data = {
        '나라': ['중국', '인도', '방글라데시', '베트남', '인도네시아', '태국', '필리핀', '일본', '네덜란드', '기타 국가'],
        '영향받는 인구 비율 (%)': [24, 15, 12, 11, 7, 5, 4, 3, 2, 17] # 합계 100%
    }
    df = pd.DataFrame(data)
    return df

# -------------------------
# 사이드바: 사용자 입력
# -------------------------
st.sidebar.title("🔧 설정")
st.sidebar.markdown("연도와 국가를 선택하면 지도가 실시간으로 갱신됩니다.")
sel_year = st.sidebar.slider("연도 선택", min_value=2025, max_value=2100, value=2050, step=5)

# 국가 검색 UI (텍스트 입력)
country_name = st.sidebar.text_input("나라 이름 검색", placeholder="예: 대한민국, 이집트, 브라질")


# -------------------------
# 메인 화면 구성
# -------------------------

# --- 1. 앱 제목 ---
st.title("🌊 물러서는 땅, 다가오는 바다: 해수면 상승 대시보드")

# --- 2. 인터랙티브 지도 (메인 화면 최상단) ---
st.header(f"🗺️ {sel_year}년 전 세계 인구 피해 위험 지역")
initialize_ee() # GEE 인증 실행

DEM = ee.Image('NASA/NASADEM_HGT/001').select('elevation')
POPULATION = ee.ImageCollection('WorldPop/GP/100m/pop').filterDate('2020').mean()

sea_level_rise = (sel_year - 2025) / 75 * 0.8

# 지도 중심 좌표와 줌 레벨을 session_state로 관리하여 검색 상태 유지
if 'map_center' not in st.session_state:
    st.session_state.map_center = [20, 0]
    st.session_state.map_zoom = 2

# 국가 검색 로직
if country_name:
    normalized_name = country_name.strip()
    if normalized_name in COUNTRY_COORDS:
        # 검색어가 목록에 있으면 지도 좌표를 업데이트
        st.session_state.map_center = COUNTRY_COORDS[normalized_name]
        st.session_state.map_zoom = 6
    # 검색어가 목록에 없으면, 마지막 검색 상태를 유지 (지도를 움직이지 않음)
else:
    # 검색어가 비어 있으면 전체 지도로 리셋
    st.session_state.map_center = [20, 0]
    st.session_state.map_zoom = 2


with st.spinner("지도 데이터를 계산하고 있습니다..."):
    flooded_mask_global = DEM.lte(sea_level_rise).selfMask()
    affected_population_heatmap = POPULATION.updateMask(flooded_mask_global)

    heatmap_vis_params = {
        'min': 0,
        'max': 250,
        'palette': ['orange', 'red', 'darkred']
    }

    # session_state에 저장된 좌표와 줌 레벨로 지도 생성
    m = geemap.Map(center=st.session_state.map_center, zoom=st.session_state.map_zoom)
    m.add_basemap('SATELLITE')

    map_id_dict = affected_population_heatmap.getMapId(heatmap_vis_params)
    folium.TileLayer(
        tiles=map_id_dict['tile_fetcher'].url_format,
        attr='Google Earth Engine',
        overlay=True,
        name=f'{sel_year}년 인구 피해 히트맵',
        show=True
    ).add_to(m)

    folium.LayerControl().add_to(m)

m.to_streamlit(height=800)

st.markdown("---")

# --- 3. 보고서 본문 ---
st.header("📘 해수면 상승의 위험과 우리의 대처법")
st.markdown("#### 서론 — 문제 제기")
st.markdown(
    "인류의 산업화 이후 대기 중 온실가스 농도는 급격히 증가했고, 그 결과 지구의 평균 기온이 상승했습니다. "
    "이로 인해 육지의 빙하와 빙상이 녹고 바닷물의 열팽창이 일어나면서 전 세계적인 해수면 상승이 관찰됩니다.  \n\n"
    "해수면 상승은 단순한 '물의 증가'가 아니라, 수자원 오염, 농업지 손실, 거주지 상실, 생계 기반 붕괴, 문화유산 소실 등 "
    "사회경제적·문화적 충격을 동반하는 재난입니다. 특히 평균 해발고가 낮은 섬나라와 연안 도시는 그 영향이 치명적입니다."
)
st.markdown("----")
st.markdown("#### 본론 1 — 데이터 분석 (요약)")
st.markdown(
    "- 이 대시보드는 **실제 위성 데이터를 기반**으로 연도별 **예상 인구 피해 위험 지역**을 시각화합니다.  \n"
    "- 지도에서는 주황색에서 붉은색으로 갈수록 해당 지역의 침수 시 인구 피해 위험이 높음을 의미합니다.  \n"
    "- 이 분석은 NASA의 지형 데이터(NASADEM)와 WorldPop의 인구 데이터를 사용합니다."
)
st.markdown("----")
st.markdown("#### 본론 2 — 원인 및 영향 탐구 (사례 중심)")
st.markdown("**투발루 (Tuvalu)** — 남태평양의 작은 섬나라인 투발루는 평균 해발고가 2~3m에 불과합니다. "
            "작은 해수면 상승조차 농지와 식수원에 치명적이며 이미 생활터전이 침식되는 사례가 보고되고 있습니다.")
st.markdown("**투발루의 실제 상황 요약**")
st.markdown(
    "- 이미 일부 저지대 지역에서 염수화(saltwater intrusion)가 발생하여 식수원이 오염되고 있습니다.  \n"
    "- 주민들이 호주·뉴질랜드 등으로 이주를 시도하였으나 이민 문턱·정책 문제로 쉽지 않은 상황입니다.  \n"
    "- 문화적·정체성 측면에서 '국토 상실' 문제는 단순한 이주 문제를 넘어섰습니다."
)
st.markdown("----")
st.markdown("#### 본론 3 — 청소년이 알면 좋은 핵심 포인트")
st.markdown(
    "1. 해수면 상승은 모든 사람의 문제가 아니라 **특정 지역과 그룹에 더 큰 타격**을 줍니다.  \n"
    "2. 기후변화 완화(온실가스 감축)와 적응(연안 복원, 이주 계획)은 함께 가야 합니다.  \n"
    "3. 개인의 실천도 중요하지만 정책·국제 협력이 더 큰 영향을 미칩니다."
)
st.markdown("----")
st.markdown("#### 결론 및 권고 (요약)")
st.markdown(
    "- **정책적 권고**: 연안 관리 계획 수립, 취약지역 개발 제한, 국제적 이주 협력 및 원조 체계 마련.  \n"
    "- **기술적 대응**: 방파제 및 자연 기반 해안 방어(맹그로브·갯벌 복원) 병행.  \n"
    "- **교육적 대응**: 청소년 대상 기후 교육 강화와 지역 캠페인 활성화."
)

# -------------------------
# 원 그래프 통계
# -------------------------
st.markdown("---")
st.header("📈 국가별 예상 피해 통계")
st.markdown(
    """
    아래 원 그래프는 2100년까지 예상되는 해수면 상승으로 인해 **전 세계에서 가장 큰 인구 피해가 예상되는 국가들의 비율**을 나타낸 예측 통계입니다.
    이는 여러 기후 연구 기관의 보고서를 기반으로 한 **교육용 예측 모델**이며, 실제 피해는 각국의 대응 정책에 따라 달라질 수 있습니다.
    """
)
df_pie_chart = generate_pie_chart_data()
fig_pie = px.pie(df_pie_chart,
                 names='나라',
                 values='영향받는 인구 비율 (%)',
                 title='해수면 상승으로 인한 국가별 인구 피해 비율 (2100년 예측)',
                 hole=0.3) # 도넛 모양으로 만들기
fig_pie.update_traces(textposition='inside', textinfo='percent+label',
                      pull=[0.05, 0.05, 0.05, 0.05, 0.05, 0, 0, 0, 0, 0]) # 주요 국가 강조
st.plotly_chart(fig_pie, use_container_width=True)

# -------------------------
# 하단: 실천 체크리스트
# -------------------------
st.markdown("---")
st.header("✅ 청소년 친환경 실천 체크리스트")
options = [
    "사용하지 않는 전등 끄기", "대중교통 이용/자전거 타기", "일회용품 줄이기 (컵/빨대 등)",
    "음식물 낭비 줄이기", "분리배출 철저히 하기", "친환경 제품 사용 촉구",
    "학교 환경 동아리 참여", "지역 해변/강 정화 활동 참여", "텃밭 가꾸기 또는 나무 심기",
    "기후 관련 캠페인/청원 참여"
]
checked = []
cols = st.columns(2)
for i, opt in enumerate(options):
    with cols[i % 2]:
        if st.checkbox(opt, key=f"act_{i}"):
            checked.append(opt)

if checked:
    st.markdown(f"**{len(checked)}**개의 항목을 실천하기로 약속했어요! 👍")
    df_checked = pd.DataFrame({"실천항목": checked})
    st.download_button("나의 다짐 목록 다운로드", data=df_checked.to_csv(index=False).encode("utf-8"), file_name="my_climate_actions.csv", mime="text/csv")

# -------------------------
# 데이터 출처
# -------------------------
st.markdown("---")
st.header("📊 데이터 출처")
st.markdown(
    """
    이 대시보드에서 사용된 주요 데이터는 다음과 같습니다.

    - **지형 고도 데이터 (DEM)**: NASA NASADEM Digital Elevation 30m ([NASA/NASADEM_HGT/001](https://developers.google.com/earth-engine/datasets/catalog/NASA_NASADEM_HGT_001))
    - **인구 밀도 데이터**: WorldPop Global Project Population Data (100m resolution) ([WorldPop/GP/100m/pop](https://developers.google.com/earth-engine/datasets/catalog/WorldPop_GP_100m_pop))

    *모든 데이터는 Google Earth Engine 플랫폼을 통해 실시간으로 처리됩니다.*
    """
)

# -------------------------
# 맺음말
# -------------------------
st.markdown("---")
st.markdown("### 마무리 — 지금 우리가 해야 할 일")
st.markdown(
    "해수면 상승은 이미 일부 지역에서 현실로 다가왔습니다. 이 대시보드는 실제 위성 데이터를 사용하여 미래의 위험을 예측하고, "
    "우리가 왜 지금 행동해야 하는지에 대한 경각심을 일깨우기 위해 만들어졌습니다. 작은 실천이 모여 큰 변화를 만듭니다."
)